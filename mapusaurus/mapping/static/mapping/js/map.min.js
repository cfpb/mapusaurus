"use strict";

function init() {
    $.when(getTractsInBounds(getBoundParams()), getTractData(getBoundParams(), getActionTaken($("#action-taken-selector option:selected").val()))).done(function(data1, data2) {
        rawGeo = data1[0], rawData = data2[0], createTractDataObj(), redrawCircles(dataStore.tracts), 
        $("#bubbles_loading").hide();
    });
}

function setMapHeight() {
    var viewportHeight = $(window).height(), warningBannerHeight = $("#warning-banner").outerHeight(), headerHeight = $("#header").outerHeight(), mapHeaderHeight = $("#map-header").outerHeight(), mapHeight = viewportHeight - (warningBannerHeight + headerHeight + mapHeaderHeight);
    $("#map-aside").css("height", mapHeight), $("#map").css("height", mapHeight);
}

function getTractsInBounds(bounds, callback) {
    $("#bubbles_loading").show();
    var endpoint = "/api/tractCentroids/", params = {
        neLat: bounds.neLat,
        neLon: bounds.neLon,
        swLat: bounds.swLat,
        swLon: bounds.swLon
    };
    return $.ajax({
        url: endpoint,
        data: params,
        traditional: !0,
        success: console.log("tract Get successful")
    }).fail(function(status) {
        console.log("no data was available at" + endpoint + ". status: " + status);
    });
}

function getTractData(bounds, actionTakenVal, callback) {
    $("#bubbles_loading").show();
    var endpoint = "/api/all/", params = {
        year: 2013,
        neLat: bounds.neLat,
        neLon: bounds.neLon,
        swLat: bounds.swLat,
        swLon: bounds.swLon
    };
    return urlParam("year") && (params.year = urlParam("year")), urlParam("lender") ? (params.lender = urlParam("lender"), 
    actionTakenVal ? params.action_taken = actionTakenVal : console.log("No action taken value - default (1-5) will be used."), 
    $.ajax({
        url: endpoint,
        data: params,
        traditional: !0,
        success: console.log("get API All Data request successful")
    }).fail(function(status) {
        console.log("no data was available at" + endpoint + ". status: " + status);
    })) : (console.log(" Lender parameter is required."), !1);
}

function createTractDataObj(callback) {
    dataStore.tracts = {}, _.each(rawGeo.features, function(feature) {
        var geoid = feature.properties.geoid;
        dataStore.tracts[geoid] = feature.properties, _.extend(dataStore.tracts[geoid], rawData.minority[geoid]), 
        "undefined" != typeof rawData.loanVolume[geoid] ? _.extend(dataStore.tracts[geoid], rawData.loanVolume[geoid]) : dataStore.tracts[geoid].volume = 0;
    }), "function" == typeof callback && callback();
}

function redrawCircles(geoData) {
    $("#bubbles_loading").show(), layers.Centroids.clearLayers(), _.each(geoData, function(geo) {
        drawCircle(geo);
    });
}

function updateCircles() {
    layers.Centroids.eachLayer(function(layer) {
        layer.setStyle({
            fillColor: updateMinorityCircleFill(layer.geoid)
        });
    }), console.log("color update complete.");
}

function drawCircle(geo) {
    var data = geo, style = minorityContinuousStyle(geo, baseStyle), circle = L.circle([ geo.centlat, geo.centlon ], hmdaStat(data), style);
    circle.geoid = geo.geoid, circle.on("mouseover mousemove", function(e) {
        new L.Rrose({
            offset: new L.Point(0, 0),
            closeButton: !1,
            autoPan: !1
        }).setContent(data.volume + " records<br />" + data.num_households + " households").setLatLng(e.latlng).openOn(map);
    }), circle.on("mouseout", function() {
        map.closePopup();
    }), layers.Centroids.addLayer(circle);
}

function minorityContinuousStyle(geoProps, baseStyle) {
    return minorityStyle(geoProps, function(minorityPercent, bucket) {
        return (minorityPercent - bucket.lowerBound) / bucket.span;
    }, baseStyle);
}

function minorityStyle(geoProps, percentFn, baseStyle) {
    var geoid = geoProps.geoid, tract = dataStore.tracts[geoid];
    if (0 === tract.total_pop || 0 === tract.volume) return noStyle;
    var perc = minorityPercent(tract), bucket = toBucket(perc), bucketPercent = percentFn(perc, bucket);
    return $.extend({}, baseStyle, {
        fillColor: colorFromPercent(bucketPercent, bucket.colors)
    });
}

function updateMinorityCircleFill(geoid) {
    var tract = dataStore.tracts[geoid];
    if (0 === tract.total_pop || 0 === tract.volume) return noStyle;
    var perc = minorityPercent(tract), bucket = toBucket(perc), bucketPercent = percentFn(perc, bucket);
    return colorFromPercent(bucketPercent, bucket.colors);
}

function percentFn(minorityPercent, bucket) {
    return (minorityPercent - bucket.lowerBound) / bucket.span;
}

function minorityPercent(tractData) {
    var fieldName = $("#category-selector option:selected").val();
    return "inv_" === fieldName.substring(0, 4) ? 1 - tractData[fieldName.substr(4)] : tractData[fieldName];
}

function toBucket(percent) {
    var i, len = colorRanges.length;
    for (i = 0; len - 1 > i; i++) if (colorRanges[i + 1].lowerBound > percent) return colorRanges[i];
    return colorRanges[len - 1];
}

function colorFromPercent(percent, c) {
    var diffR = (c.highR - c.lowR) * percent, diffG = (c.highG - c.lowG) * percent, diffB = (c.highB - c.lowB) * percent;
    return "rgb(" + (c.lowR + diffR).toFixed() + ", " + (c.lowG + diffG).toFixed() + ", " + (c.lowB + diffB).toFixed() + ")";
}

function hmdaStat(tractData) {
    var $selected = $("#action-taken-selector option:selected"), scale = ($selected.val(), 
    $selected.data("scale")), area = scale * tractData.volume;
    return Math.sqrt(area);
}

function layerUpdate(layer) {
    layer || console.log("The layer you've requested does not exist.");
    for (var i = minorityLayers.length - 1; i >= 0; i--) map.removeLayer(minorityLayers[i]);
    switch (layer) {
      case "inv_non_hisp_white_only_perc":
        layer = layers.PctMinority;
        break;

      case "hispanic_perc":
        layer = layers.PctHispanic;
        break;

      case "non_hisp_black_only_perc":
        layer = layers.PctBlack;
        break;

      case "non_hisp_asian_only_perc":
        layer = layers.PctAsian;
        break;

      case "non_hisp_white_only_perc":
        layer = layers.PctNonWhite;
    }
    map.addLayer(layer), layers.Water.bringToFront(), layers.Boundaries.bringToFront(), 
    layers.CountyLabels.bringToFront(), addParam("category", $("#category-selector option:selected").val()), 
    updateCircles();
}

function urlParam(field) {
    var url = window.location.search.replace("?", ""), keyValueStrs = url.split("&"), pairs = _.map(keyValueStrs, function(keyValueStr) {
        return keyValueStr.split("=");
    }), params = _.reduce(pairs, function(soFar, pair) {
        return 2 === pair.length && (soFar[pair[0]] = pair[1]), soFar;
    }, {});
    return params[field];
}

function getActionTaken(value) {
    var actionTaken;
    switch (value) {
      case "all-apps-5":
        actionTaken = "1,2,3,4,5";
        break;

      case "all-apps-6":
        actionTaken = "1,2,3,4,5,6";
        break;

      case "originations-1":
        actionTaken = "1";
    }
    return actionTaken;
}

function getBoundParams() {
    var bounds = map.getBounds(), padding = 0;
    return console.log(bounds), {
        neLat: (bounds._northEast.lat + padding).toFixed(6),
        neLon: (bounds._northEast.lng + padding).toFixed(6),
        swLat: (bounds._southWest.lat - padding).toFixed(6),
        swLon: (bounds._southWest.lng - padding).toFixed(6)
    };
}

function getUniques(arr) {
    return _.uniq(arr);
}

window.console || (console = {
    log: function() {}
}), $(document).ready(function() {
    $(".tabs").show(), $(window).resize(function() {
        setMapHeight();
    }), $("#category-selector").on("change", function() {
        var val = $("#category-selector").val();
        layerUpdate(val);
    }), "undefined" != typeof loadParams.category ? ($("#category-selector").val(loadParams.category.values), 
    layerUpdate(loadParams.category.values)) : (addParam("category", "inv_non_hisp_white_only_perc"), 
    layerUpdate("inv_non_hisp_white_only_perc")), "undefined" != typeof loadParams.action ? $("#action-taken-selector").val(loadParams.action.values) : addParam("action", "all-apps-5"), 
    $("#action-taken-selector").on("change", function() {
        addParam("action", $("#action-taken-selector option:selected").val()), init();
    }), init();
});

var rawGeo, rawLar, rawMinority, rawData, dataStore = {};

dataStore.tracts = {};

var baseStyle = {
    fillOpacity: .9,
    weight: .5,
    className: "lar-circle",
    fillColor: "#333"
}, noStyle = {
    stroke: !1,
    weight: 0,
    fill: !1
}, colorRanges = [ {
    span: .5,
    lowerBound: 0,
    colors: {
        lowR: 107,
        lowG: 40,
        lowB: 10,
        highR: 250,
        highG: 186,
        highB: 106
    }
}, {
    span: .5,
    lowerBound: .5,
    colors: {
        lowR: 124,
        lowG: 198,
        lowB: 186,
        highR: 12,
        highG: 48,
        highB: 97
    }
} ];
function getTableData() {
    var params = {}, endpoint = "/api/tables/";
    return urlParam("lender") ? (params.lender = urlParam("lender"), urlParam("metro") ? params.metro = urlParam("metro") : console.log("No metro area provided"), 
    $.ajax({
        url: "/api/tables/",
        data: params,
        traditional: !0,
        success: console.log("get API All Data request successful")
    }).fail(function(status) {
        console.log("no data was available at" + endpoint + ". status: " + status);
    })) : (console.log(" Lender parameter is required."), !1);
}

function createTable(showPeers) {
    msaData || (msaData = getTableData()), msaData.done(function(res) {
        tableData || (tableData = res, prepTableData(tableData));
        var $tbl = buildTable(tableData, showPeers);
        activateTable($tbl), $("#tableLoadImage").hide(), $tbl.appendTo($("#table-container")).show(), 
        $("#closeTable").on("click", function() {
            toggleDataContainer(!1), currentChart = "undefined", $(".chart-toggle").removeClass("active-layer");
        }), generateTooltips("#table-container", [ 0, -1 ]);
    });
}

function prepTableData(data) {
    var msa = data.msa;
    return _.extend(msa, prepNumbers(msa)), msa.peerData = getPeerData(msa), _.each(data.counties, function(county, key) {
        _.extend(county, prepNumbers(county)), county.peerData = getPeerData(county), county.geoid = key;
    }), data;
}

function decimalToPercentage(val) {
    var num = parseFloat(val);
    return isNaN(num) ? void 0 : +(100 * num).toFixed(2);
}

function prepNumbers(data) {
    var obj = {}, suffix = "_pct", len = suffix.length;
    return _.each(data, function(val, key) {
        -1 !== key.indexOf(suffix, key.length - len) && (obj[key] = decimalToPercentage(val) || 0);
    }), obj;
}

function getPeerData(data) {
    var peerData = {
        isPeer: !0
    };
    return _.each(data, function(val, key) {
        var strs = key.split("_");
        "peer" === strs[0] && (peerData[strs.slice(1).join("_")] = val);
    }), peerData;
}

function buildTable(tableData, showPeers) {
    var $tbl = $("<table>", {
        "class": "summary-data-table " + (showPeers ? "peer-table" : "basic-table")
    }), thead = buildTableHead(showPeers);
    $tbl.append(thead);
    var contents = buildTableContents(tableData, showPeers);
    return $tbl.append(contents), $tbl;
}

function buildTableHead(showPeers) {
    return theadTemplate({
        showPeers: showPeers
    });
}

function buildTableContents(tableData, showPeers) {
    var tbodies = [], msaRows = buildTableRows(tableData.msa, "MSA", showPeers), $msaBody = $("<tbody>", {
        "class": "tablesorter-infoOnly"
    });
    $msaBody.append(msaRows), tbodies.push($msaBody);
    var $countyBody = $("<tbody>");
    return _.each(tableData.counties, function(county) {
        var countyRows = buildTableRows(county, "County", showPeers);
        $countyBody.append(countyRows);
    }), tbodies.push($countyBody), tbodies;
}

function buildTableRows(data, rowType, showPeers) {
    var rows = [ buildRow(data, rowType, showPeers) ];
    return showPeers && rows.push(buildRow(data.peerData, rowType, showPeers)), rows;
}

function buildRow(data, rowType, showPeers) {
    var templateData;
    return templateData = _.extend({
        rowType: rowType,
        showPeers: showPeers
    }, data), templateData.className = rowType.toLowerCase() + "-row ", data.isPeer ? templateData.className += " peer-row tablesorter-childRow" : templateData.className += " target-row", 
    rowTemplate(templateData);
}

function activateTable($tbl) {
    return $tbl.tablesorter({
        headerTemplate: "",
        widgets: [ "stickyHeaders" ],
        widgetOptions: {
            stickyHeaders_attachTo: "#data-container"
        }
    });
}

function destroyData() {
    destroyTable(), $("#table-container").hide(), setMapHeight();
}

function destroyTable() {
    $(".summary-data-table").trigger("destroy").remove(), setMapHeight();
}

function toggleDataContainer(showData) {
    showDataContainer = showData, showData ? ($("#data-container").show(), $("#data-container-sizer").show()) : ($("#data-container").hide(), 
    $("#data-container-sizer").hide()), setMapHeight();
}

function getOddsClass(ratio) {
    var oddsClass = "odds-normal";
    return oddsClass = ratio > 0 && .4 >= ratio || 0 === ratio ? "odds-warning" : ratio > .4 && .8 > ratio ? "odds-caution" : "odds-normal";
}

var theadTemplate, rowTemplate, tableData, currentChart, msaData;

$(document).ready(function() {
    _.templateSettings.variable = "data", theadTemplate = _.template($("script.thead-template").html()), 
    rowTemplate = _.template($("script.row-template").html()), $(".chart-toggle").click(function(e) {
        var $target = $(e.target).closest(".chart-toggle"), id = $target.attr("id");
        $(".chart-toggle").removeClass("active-layer"), $target.addClass("active-layer"), 
        currentChart && destroyData(), currentChart != id ? (createTable("chart-toggle__peer-table" === id), 
        $("#table-container").show(), currentChart = id, toggleDataContainer(!0)) : (currentChart = null, 
        toggleDataContainer(!1), $(".chart-toggle").removeClass("active-layer"));
    });
});
//# sourceMappingURL=table.min.js.map
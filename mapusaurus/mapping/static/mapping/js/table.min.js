!function($) {
    "use strict";
    var ts = $.tablesorter;
    ts.addWidget({
        id: "sortTbody",
        priority: 100,
        options: {
            sortTbody_primaryCell: null,
            sortTbody_type: "Natural"
        },
        init: function(table, thisWidget, c, wo) {
            var tbodies = c.$table.children('tbody:not(".tablesorter-childTbody, .tablesorter-infoOnly")'), tbodyChildren = {};
            tbodies.each(function(i, t) {
                var $t = $(t);
                $t.data("rowid", i), tbodyChildren[i] = $t.next(".tablesorter-childTbody");
            }), c.$table.unbind("sortEnd.sortTbody").bind("sortEnd.sortTbody", function() {
                var tbl = ("text" === wo.sortTbody_type.toLowerCase() ? "sortText" : "sortNatural", 
                c.$table), method = "sortNatural", sortedBy = tbl.find('th[aria-sort="ascending"], th[aria-sort="descending"]'), direction = "ascending" == sortedBy.attr("aria-sort") ? 0 : 1, colCl = $(sortedBy).data("sortclass");
                tbodies.sort(function(a, b) {
                    var $a = $(direction ? b : a), $b = $(direction ? a : b);
                    return ts[method]($a.find("tr:first ." + colCl).text(), $b.find("tr:first ." + colCl).text());
                }), c.$table.hide(), tbodies.each(function(i, t) {
                    var $t = $(t);
                    $t.appendTo(c.$table), $(tbodyChildren[$t.data("rowid")]).appendTo(c.$table);
                }), c.$table.show();
            });
        },
        remove: function(table, c) {
            c.$table.unbind("sortEnd.sortTbody");
        }
    });
}(jQuery), $(document).ready(function() {
    function getTableData() {
        var params = {}, endpoint = "/api/tables/";
        return urlParam("lender") ? (params.lender = urlParam("lender"), urlParam("metro") ? params.metro = urlParam("metro") : console.log("No metro area provided"), 
        $.ajax({
            url: endpoint,
            data: params,
            traditional: !0,
            success: console.log("get API All Data request successful")
        }).fail(function(status) {
            console.log("no data was available at" + endpoint + ". status: " + status);
        })) : (console.log(" Lender parameter is required."), !1);
    }
    function decimalToPercentage(val) {
        var num = parseFloat(val);
        return isNaN(num) ? void 0 : +(100 * num).toFixed(2);
    }
    function prepNumbers(data) {
        _.each([ "lma_pct", "mma_pct", "hma_pct" ], function(i) {
            data[i] = decimalToPercentage(data[i]) || 0;
        });
    }
    function prepTableData(tableData) {
        msa = tableData.lender, msa.odds = tableData.odds, tableData.msa = msa, _.each([ tableData.lender, tableData.peers ], function(i) {
            prepNumbers(i);
        }), _.each(tableData.counties, function(c) {
            prepNumbers(c), prepNumbers(c.peers), _.each((c || {}).tracts, function(t) {
                prepNumbers(t), prepNumbers(t.peers);
            });
        });
    }
    function createTable(showPeers) {
        var tableData = fakeTableData();
        prepTableData(tableData);
        var $tbl = buildTable(tableData, showPeers);
        $("#table-container").append($tbl), activateTable($tbl), msaData.done(function(res) {
            tableData || (tableData = res.table_data, prepTableData(tableData));
            var $tbl = buildTable(tableData, showPeers);
            activateTable($tbl);
        });
    }
    function activateTable($tbl) {
        $tableContainer.append($tbl), activateTableSorting($tbl), activateExpandables($tbl), 
        $tbl.show();
    }
    function activateTableSorting($tbl) {
        $tbl.tablesorter({
            headerTemplate: "",
            widgets: [ "sortTbody", "stickyHeaders" ],
            widgetOptions: {
                stickyHeaders_attachTo: "#data-container"
            }
        });
    }
    function activateExpandables($tbl) {
        $tbl.find(".tablesorter-childTbody").hide(), $tbl.find(".county-tbody").click(function(e) {
            var $target = $(e.target), $tbody = $target.closest("tbody"), child = $tbody.next(".tablesorter-childTbody");
            $(child).is(":visible") ? ($(child).hide(), $tbody.find(".expandable_cue-open").show(), 
            $tbody.find(".expandable_cue-close").hide()) : ($(child).show(), $tbody.find(".expandable_cue-open").hide(), 
            $tbody.find(".expandable_cue-close").show());
        });
    }
    function destroyData() {
        "chart-toggle__lar-chart" === currentChart ? (destroyLarChart(), $chartContainer.hide()) : ($(".summary-data-table").trigger("destroy").remove(), 
        $tableContainer.hide());
    }
    function toggleDataContainer(showData) {
        showDataContainer = showData, $dataContainer[showData ? "show" : "hide"](), setMapHeight();
    }
    function buildTable(tableData, showPeers) {
        var $tbl = $("<table>", {
            "class": "summary-data-table " + (showPeers ? "peer-table" : "basic-table")
        }), thead = buildTableHead(showPeers);
        $tbl.append(thead);
        var contents = buildTableContents(tableData, showPeers);
        return $tbl.append(contents), $tbl;
    }
    function buildTableHead(showPeers) {
        return theadTemplate({
            showPeers: showPeers
        });
    }
    function buildTableContents(tableData, showPeers) {
        var tbodies = [], $msaTbody = buildTableBody("MSA"), msaRows = buildTableRows(tableData.msa, "MSA", showPeers ? tableData.peers : null);
        return $msaTbody.append(msaRows), tbodies.push($msaTbody), _.each(tableData.counties, function(county) {
            var $countyTbody = buildTableBody("County"), countyRows = buildTableRows(county, "County", showPeers ? county.peers : null);
            $countyTbody.append(countyRows), tbodies.push($countyTbody);
            var $tractTbody = buildTableBody("Tract");
            _.each(county.tracts, function(tract) {
                var tractRows = buildTableRows(tract, "Tract", showPeers ? tract.peers : null);
                $tractTbody.append(tractRows);
            }), tbodies.push($tractTbody);
        }), tbodies;
    }
    function buildTableBody(rowType) {
        var className = rowType.toLowerCase() + "-tbody";
        return "MSA" === rowType ? className += " tablesorter-infoOnly" : "Tract" === rowType && (className += " tablesorter-childTbody"), 
        $("<tbody>", {
            "class": className
        });
    }
    function buildTableRows(data, rowType, peers) {
        var rows = [ buildRow(data, rowType, "Target", peers) ];
        return peers && rows.push(buildRow(peers, rowType, "Peers", peers)), rows;
    }
    function buildRow(data, rowType, institutionType, peers) {
        var templateData = _.extend({
            institutionType: institutionType,
            rowType: rowType,
            showPeers: peers ? !0 : !1
        }, data);
        return templateData["is" + rowType] = !0, templateData["is" + institutionType] = !0, 
        templateData.className = rowType.toLowerCase() + "-row " + institutionType.toLowerCase() + "-row", 
        "Peers" === institutionType && (templateData.className += " tablesorter-childRow"), 
        rowTemplate(templateData);
    }
    var currentChart, $dataContainer = $("#data-container"), $chartContainer = $("#plot-container"), $tableContainer = $("#table-container");
    _.templateSettings.variable = "data";
    var theadTemplate = _.template($("script.thead-template").html()), rowTemplate = _.template($("script.row-template").html()), msaData = getTableData();
    $(".chart-toggle").click(function(e) {
        var $target = $(e.target).closest(".chart-toggle"), id = $target.attr("id");
        currentChart && destroyData(), currentChart != id ? ("chart-toggle__basic-table" === id || "chart-toggle__peer-table" === id ? (createTable("chart-toggle__peer-table" === id), 
        $tableContainer.show()) : "chart-toggle__lar-chart" === id && (plotLarVolume(), 
        $chartContainer.show()), currentChart = id, toggleDataContainer(!0)) : (currentChart = null, 
        toggleDataContainer(!1));
    });
    var fakeTableData = function() {
        var data = {};
        return data.lender = fakeRowData(), data.odds = data.lender.odds, data.peers = fakeRowData(), 
        data.counties = fakeCountiesData(), data;
    }, fakeCountiesData = function() {
        for (var counties = [], c = 0; c < _.random(5, 10); c++) {
            var county = fakeRowData();
            county.peers = fakeRowData();
            for (var tracts = [], t = 0; t < _.random(5, 10); t++) {
                var tract = fakeRowData();
                tract.peers = fakeRowData(), tracts.push(tract);
            }
            county.tracts = tracts, counties.push(county);
        }
        return counties;
    }, fakeRowData = function() {
        var mma_pct = _.random(1, 5) / 10, lma_pct = _.random(1, 5) / 10, hma_pct = 1 - (mma_pct + lma_pct), pop = _.random(1e3, 1e4);
        return {
            geoid: _.random(1e5, 9e5),
            lma: parseInt(pop * lma_pct),
            mma: parseInt(pop * mma_pct),
            hma: parseInt(pop * hma_pct),
            lma_pct: lma_pct,
            mma_pct: mma_pct,
            hma_pct: hma_pct,
            odds: _.random(0, 75) / 10
        };
    };
});